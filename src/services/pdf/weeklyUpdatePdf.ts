import { jsPDF } from 'jspdf';
import type { WeeklyUpdateResult } from "@/types/canonical";

export class WeeklyUpdatePdfService {
  /**
   * Export weekly update as PDF
   */
  exportWeeklyUpdatePdf(params: {
    projectName: string;
    timeframeDays: number;
    result: WeeklyUpdateResult;
  }): void {
    const { projectName, result } = params;
    const { sections, citations, timeframe, template } = result;
    
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;
    let yPosition = margin;
    
    // Header
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text(`Weekly Update: ${projectName}`, margin, yPosition);
    yPosition += 15;
    
    // Metadata
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    const date = new Date().toLocaleDateString();
    doc.text(`Date: ${date}`, margin, yPosition);
    yPosition += 8;
    doc.text(`Template: ${template.name}`, margin, yPosition);
    yPosition += 8;
    doc.text(`Timeframe: Last ${timeframe.days} days`, margin, yPosition);
    yPosition += 20;
    
    // Last Week Section
    yPosition = this.addSection(doc, 'Last Week', sections.lastWeek, yPosition, pageWidth, margin);
    
    // This Week Section
    yPosition = this.addSection(doc, 'This Week', sections.thisWeek, yPosition, pageWidth, margin);
    
    // Risks Section
    if (sections.risks.length > 0) {
      yPosition = this.addBulletSection(doc, 'Risks & Issues', sections.risks, yPosition, pageWidth, margin);
    }
    
    // Asks Section
    if (sections.asks.length > 0) {
      yPosition = this.addBulletSection(doc, 'Asks & Support Needed', sections.asks, yPosition, pageWidth, margin);
    }
    
    // Citations Section
    if (citations.length > 0) {
      yPosition = this.addCitationsSection(doc, citations, yPosition, pageWidth, margin);
    }
    
    // Footer
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(
        `Generated by Stratus - Page ${i} of ${pageCount}`,
        pageWidth / 2,
        doc.internal.pageSize.getHeight() - 10,
        { align: 'center' }
      );
    }
    
    // Save PDF
    const dateStr = new Date().toISOString().split('T')[0];
    const filename = `Stratus_WeeklyUpdate_${projectName.replace(/[^a-zA-Z0-9]/g, '_')}_${dateStr}.pdf`;
    doc.save(filename);
  }
  
  private addSection(
    doc: jsPDF, 
    title: string, 
    content: string, 
    yPosition: number, 
    pageWidth: number, 
    margin: number
  ): number {
    // Check if we need a new page
    if (yPosition > doc.internal.pageSize.getHeight() - 60) {
      doc.addPage();
      yPosition = margin;
    }
    
    // Section title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text(title, margin, yPosition);
    yPosition += 12;
    
    // Section content
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    const lines = doc.splitTextToSize(content, pageWidth - 2 * margin);
    
    for (const line of lines) {
      if (yPosition > doc.internal.pageSize.getHeight() - 30) {
        doc.addPage();
        yPosition = margin;
      }
      doc.text(line, margin, yPosition);
      yPosition += 7;
    }
    
    return yPosition + 10;
  }
  
  private addBulletSection(
    doc: jsPDF, 
    title: string, 
    items: string[], 
    yPosition: number, 
    pageWidth: number, 
    margin: number
  ): number {
    // Check if we need a new page
    if (yPosition > doc.internal.pageSize.getHeight() - 60) {
      doc.addPage();
      yPosition = margin;
    }
    
    // Section title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text(title, margin, yPosition);
    yPosition += 12;
    
    // Bullet points
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    
    for (const item of items) {
      if (yPosition > doc.internal.pageSize.getHeight() - 30) {
        doc.addPage();
        yPosition = margin;
      }
      
      const lines = doc.splitTextToSize(`• ${item}`, pageWidth - 2 * margin - 10);
      for (const line of lines) {
        doc.text(line, margin + 5, yPosition);
        yPosition += 7;
      }
      yPosition += 3;
    }
    
    return yPosition + 10;
  }
  
  private addCitationsSection(
    doc: jsPDF, 
    citations: any[], 
    yPosition: number, 
    pageWidth: number, 
    margin: number
  ): number {
    // Check if we need a new page
    if (yPosition > doc.internal.pageSize.getHeight() - 60) {
      doc.addPage();
      yPosition = margin;
    }
    
    // Section title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Data Sources', margin, yPosition);
    yPosition += 12;
    
    // Citations
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    
    for (const citation of citations) {
      if (yPosition > doc.internal.pageSize.getHeight() - 30) {
        doc.addPage();
        yPosition = margin;
      }
      
      const citationText = `• ${citation.type}: ${citation.note || citation.title || citation.id}`;
      const lines = doc.splitTextToSize(citationText, pageWidth - 2 * margin - 10);
      
      for (const line of lines) {
        doc.text(line, margin + 5, yPosition);
        yPosition += 7;
      }
      yPosition += 3;
    }
    
    return yPosition + 10;
  }
}

export const weeklyUpdatePdfService = new WeeklyUpdatePdfService();